// 链式结构：表示队列 
typedef int QDataType;
typedef struct QNode
{ 
    struct QNode* _pNext; 
    QDataType _data; 
}QNode; 
 
// 队列的结构 
typedef struct Queue 
{ 
  QNode* _front; 
  QNode * _rear; 
}Queue; 
 
// 初始化队列 
void QueueInit(Queue* q)
{
	assert(q);
	q->_front=q->_rear=NULL;
}
// 队尾入队列 
void QueuePush(Queue* q, QDataType data)
{
	assert(q);
   QNode* newnode=(QNode*)malloc(sizeof(QNode));
   newnode->_data=data;
   newnode->_pNext=NULL;
   if(q->_rear==NULL)
   {
	   q->_rear= q->_front=newnode;
   }
   else
   {
	   q->_rear->_pNext=newnode;
	   q->_rear=newnode;
   }
}
// 队头出队列 
void QueuePop(Queue* q)
{
	assert(q);
	
	QNode *p=q->_front->_pNext;
	free(q->_front);
	q->_front=p;
	if(q->_front==NULL)
	{
		q->_rear=NULL;
	}
}

// 获取队列头部元素 
QDataType QueueFront(Queue* q)
{
	assert(q);

		return q->_front->_data;

}

// 获取队列队尾元素 
QDataType QueueBack(Queue* q)
{
	assert(q);
	
	return q->_rear->_data;
}

// 获取队列中有效元素个数 
int QueueSize(Queue* q)
{
	assert(q);
	int count=0;
	QNode*p=q->_front;

	while(p!=NULL)
	{
		p=p->_pNext;
		++count;
	}
	return count;
}

// 检测队列是否为空，如果为空返回非零结果，如果非空返回0 
int QueueEmpty(Queue* q)
{
	assert(q);
	return q->_front==NULL? 1:0;
}

// 销毁队列 
void QueueDestroy(Queue* q)
{
	QNode *p=q->_front;
	while(p!=NULL) 
	{
		QNode *next=p->_pNext;
		free(p);
		p=next;
	}
	q->_front=q->_rear=NULL;
}

typedef struct {
//定义两个队列
Queue q1;
Queue q2;
} MyStack;

/** Initialize your data structure here. */

MyStack* myStackCreate() {
 MyStack *obj=(MyStack*)malloc(sizeof(MyStack));
 QueueInit(&(obj->q1));
  QueueInit(&(obj->q2));
  return obj;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) {
  
  if(QueueEmpty(&(obj->q1))==1)//q1为空
  {
     QueuePush(&(obj->q2),x);
  }
  else
  {
      QueuePush(&(obj->q1),x);
  }
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) {
  
 Queue* empty=&obj->q1;
Queue* noempty=&obj->q2;
  if(QueueEmpty(&(obj->q1))==0)//q1不为空
  {
      empty=&obj->q2;
      noempty=&obj->q1;
  }
  
  while(QueueSize((noempty))>1)
  {
      QueuePush((empty),QueueFront((noempty)));
      QueuePop((noempty));

  }
 int q=QueueFront(noempty);
   QueuePop(noempty);
  return q;
}

/** Get the top element. */
int myStackTop(MyStack* obj) {
    
    
Queue empty=obj->q1;
Queue noempty=obj->q2;
  if(QueueEmpty(&(obj->q1))==0)//q1不为空
  {
      empty=obj->q2;
      noempty=obj->q1;
  }
  return QueueBack(&(noempty));
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj) {
 return QueueEmpty(&(obj->q1))&&QueueEmpty(&(obj->q2));
}

void myStackFree(MyStack* obj) {
    QueueDestroy(&(obj->q1));
     QueueDestroy(&(obj->q2));
   //  free(&MyStack);

}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/
